# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

.env

# UR GAY
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>
    <h1>AI Chat</h1>
    <button onclick="startChat()">Start Chat</button>
    <div id="response"></div>

    <!-- Video feed and microphone -->
    <div id="video-container" style="display: none;">
        <video id="video" autoplay></video>
    </div>
    <div id="microphone-status"></div>

    <canvas id="canvas" style="display:none;"></canvas>

    <script>
        // Function to start chat
        function startChat() {
            // Display webcam feed
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(function(stream) {
                var video = document.getElementById('video');
                video.srcObject = stream;
                video.play();
                $("#video-container").show(); // Show video container
                $("#microphone-status").html("Microphone status: Active");
                activateVoice(); // Activate voice recognition
            })
            .catch(function(err) {
                console.log("An error occurred: " + err);
                $("#microphone-status").html("Error accessing microphone: " + err.message);
            });
        }

        // Function to activate voice recognition// Function to activate voice recognition
        // Function to activate voice recognition
        function activateVoice() {
            var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition;
            
            if (SpeechRecognition) {
                var recognition = new SpeechRecognition();
                recognition.lang = 'en-US';
                recognition.continuous = true; // Keep listening continuously
                
                recognition.onstart = function() {
                    $("#microphone-status").html("Listening...");
                };
                
                recognition.onresult = function(event) {
                    for (var i = event.resultIndex; i < event.results.length; ++i) {
                        var result = event.results[i][0].transcript.toLowerCase();
                        console.log('Recognition result:', result);
                        $("#microphone-status").html("Detected speech: " + result); // Display detected speech
                        
                        if (result.includes("hey paris")) {
                            console.log("Keyword detected. Prompting user.");
                            recognition.stop();
                            promptUser();
                            break;
                        } else if (result.includes("bye paris")) {
                            recognition.stop();
                            break;
                        }
                    }
                };
                
                recognition.onerror = function(event) {
                    console.error('Recognition error:', event.error);
                    $("#microphone-status").html("Recognition error: " + event.error); // Display recognition error
                };
                
                recognition.onend = function() {
                    $("#microphone-status").html("Speech recognition stopped."); // Display recognition stopped message
                };
                
                recognition.start();
            } else {
                $("#microphone-status").html("Speech recognition not supported in your browser.");
            }
        }

        // Function to prompt user for input
        function promptUser() {
            var userPrompt = window.prompt("Please enter your prompt:");
            if (userPrompt !== null && userPrompt.trim() !== "") {
                sendRequest(userPrompt);
            }
        }

        // Function to send request to server
        function sendRequest(prompt) {
            var imageBase64 = captureImage();
            $.ajax({
                type: 'POST',
                url: '/process_request', // URL to your server endpoint
                contentType: 'application/json',
                data: JSON.stringify({ prompt: prompt, image: imageBase64 }),
                success: function(response) {
                    displayResponse(response);
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }

        // Function to display response
        function displayResponse(response) {
            var responseDiv = document.getElementById('response');
            responseDiv.innerHTML = response;
        }

        // Function to capture image from webcam
        function captureImage() {
            var video = document.getElementById('video');
            var canvas = document.getElementById('canvas');
            var context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            var imageDataURL = canvas.toDataURL('image/jpeg');
            return imageDataURL;
        }
    </script>
</body>
</html>
